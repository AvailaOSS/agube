/**
 * Agube API
 * Agube API REST definition
 *
 * OpenAPI spec version: v1
 * Contact: frannabril@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse,
} from '@angular/common/http';
import { Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
import { AgubeRestConfigurationService } from '../configuration.service';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { DwellingCommentCreate } from '../model/dwellingCommentCreate';
import { DwellingCreate } from '../model/dwellingCreate';
import { DwellingDetail } from '../model/dwellingDetail';
import { DwellingResume } from '../model/dwellingResume';
import { DwellingMonthConsumption } from '../model/dwellingMonthConsumption';
import { Owner } from '../model/owner';
import { Resident } from '../model/resident';
import { WaterMeter } from '../model/waterMeter';
import { WaterMeterMeasurementsPagination } from '../model/waterMeterMeasurementsPagination';
import { WaterMeterWithMeasurements } from '../model/waterMeterWithMeasurements';
import { Comment } from './../model/comment';

@Injectable()
export class DwellingService {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    private svcConfig: AgubeRestConfigurationService,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
    this.basePath = this.svcConfig.getBasePath();
  }

  /**
   *
   * Create a new Water Meter and discharge the old Water Meter
   * @param id A unique integer value identifying this water meter.
   * @param data
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public changeCurrentDwellingWaterMeter(
    id: number,
    data: WaterMeter,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<WaterMeter>;
  public changeCurrentDwellingWaterMeter(
    id: number,
    data: WaterMeter,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<WaterMeter>>;
  public changeCurrentDwellingWaterMeter(
    id: number,
    data: WaterMeter,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<WaterMeter>>;
  public changeCurrentDwellingWaterMeter(
    id: number,
    data: WaterMeter,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling changeCurrentDwellingWaterMeter.'
      );
    }

    if (data === null || data === undefined) {
      throw new Error(
        'Required parameter data was null or undefined when calling changeCurrentDwellingWaterMeter.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<WaterMeter>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}/water-meter`,
      data,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Create a new user owner and discharge the old owner
   * @param id A unique integer value identifying this dwelling.
   * @param data
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public changeCurrentOwner(
    id: number,
    data: Owner,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Owner>;
  public changeCurrentOwner(
    id: number,
    data: Owner,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Owner>>;
  public changeCurrentOwner(
    id: number,
    data: Owner,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Owner>>;
  public changeCurrentOwner(
    id: number,
    data: Owner,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling changeCurrentOwner.'
      );
    }

    if (data === null || data === undefined) {
      throw new Error(
        'Required parameter data was null or undefined when calling changeCurrentOwner.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Owner>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}/owner`,
      data,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Create a new user resident and discharge the old resident
   * @param id A unique integer value identifying this dwelling.
   * @param data
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public changeCurrentResident(
    id: number,
    data: Resident,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Resident>;
  public changeCurrentResident(
    id: number,
    data: Resident,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Resident>>;
  public changeCurrentResident(
    id: number,
    data: Resident,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Resident>>;
  public changeCurrentResident(
    id: number,
    data: Resident,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling changeCurrentResident.'
      );
    }

    if (data === null || data === undefined) {
      throw new Error(
        'Required parameter data was null or undefined when calling changeCurrentResident.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Resident>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}/resident`,
      data,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * create a new Dwelling
   * @param data
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createDwelling(
    data: DwellingCreate,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DwellingCreate>;
  public createDwelling(
    data: DwellingCreate,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DwellingCreate>>;
  public createDwelling(
    data: DwellingCreate,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DwellingCreate>>;
  public createDwelling(
    data: DwellingCreate,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (data === null || data === undefined) {
      throw new Error(
        'Required parameter data was null or undefined when calling createDwelling.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<DwellingCreate>(
      `${this.basePath}/dwelling/create`,
      data,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Create a new Comment for this dwelling.
   * @param data
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createDwellingComment(
    data: DwellingCommentCreate,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DwellingCommentCreate>;
  public createDwellingComment(
    data: DwellingCommentCreate,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DwellingCommentCreate>>;
  public createDwellingComment(
    data: DwellingCommentCreate,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DwellingCommentCreate>>;
  public createDwellingComment(
    data: DwellingCommentCreate,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (data === null || data === undefined) {
      throw new Error(
        'Required parameter data was null or undefined when calling createDwellingComment.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<DwellingCommentCreate>(
      `${this.basePath}/dwelling/comment`,
      data,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Get current Water Meter
   * @param id A unique integer value identifying this water meter.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCurrentDwellingWaterMeter(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<WaterMeter>;
  public getCurrentDwellingWaterMeter(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<WaterMeter>>;
  public getCurrentDwellingWaterMeter(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<WaterMeter>>;
  public getCurrentDwellingWaterMeter(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getCurrentDwellingWaterMeter.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<WaterMeter>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}/water-meter`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCurrentDwellingWaterMeterHistorical(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<WaterMeterWithMeasurements>>;
  public getCurrentDwellingWaterMeterHistorical(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<WaterMeterWithMeasurements>>>;
  public getCurrentDwellingWaterMeterHistorical(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<WaterMeterWithMeasurements>>>;
  public getCurrentDwellingWaterMeterHistorical(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getCurrentDwellingWaterMeterHistorical.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<WaterMeterWithMeasurements>>(
      `${this.basePath}/dwelling/${encodeURIComponent(
        String(id)
      )}/water-meter/historical`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Get Current Owner
   * @param id A unique integer value identifying this dwelling.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCurrentOwner(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Owner>;
  public getCurrentOwner(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Owner>>;
  public getCurrentOwner(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Owner>>;
  public getCurrentOwner(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getCurrentOwner.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Owner>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}/owner`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Get current Resident
   * @param id A unique integer value identifying this dwelling.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCurrentResident(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Resident>;
  public getCurrentResident(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Resident>>;
  public getCurrentResident(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Resident>>;
  public getCurrentResident(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getCurrentResident.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Resident>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}/resident`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Return the current Water Meter with total measurements (chunk).
   * @param chunk
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCurrentWaterMeterMeasuresChunk(
    chunk: number,
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<WaterMeterWithMeasurements>;
  public getCurrentWaterMeterMeasuresChunk(
    chunk: number,
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<WaterMeterWithMeasurements>>;
  public getCurrentWaterMeterMeasuresChunk(
    chunk: number,
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<WaterMeterWithMeasurements>>;
  public getCurrentWaterMeterMeasuresChunk(
    chunk: number,
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (chunk === null || chunk === undefined) {
      throw new Error(
        'Required parameter chunk was null or undefined when calling getCurrentWaterMeterMeasuresChunk.'
      );
    }

    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getCurrentWaterMeterMeasuresChunk.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<WaterMeterWithMeasurements>(
      `${this.basePath}/dwelling/${encodeURIComponent(
        String(id)
      )}/water-meter/${encodeURIComponent(String(chunk))}`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Get Dwelling by id
   * @param id A unique integer value identifying this dwelling.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDwelling(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DwellingCreate>;
  public getDwelling(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DwellingCreate>>;
  public getDwelling(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DwellingCreate>>;
  public getDwelling(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getDwelling.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<DwellingCreate>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Return a list of all Dwelling Detail.
   * @param inAlert Alert status: None/False -&gt; All Manager Dwellings; True -&gt; Manager Dwellings whose consumption is over the limit
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDwellings(
    inAlert?: boolean,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<DwellingDetail>>;
  public getDwellings(
    inAlert?: boolean,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<DwellingDetail>>>;
  public getDwellings(
    inAlert?: boolean,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<DwellingDetail>>>;
  public getDwellings(
    inAlert?: boolean,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (inAlert !== undefined && inAlert !== null) {
      queryParameters = queryParameters.set('inAlert', <any>inAlert);
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<DwellingDetail>>(
      `${this.basePath}/dwelling`,
      {
        headers: headers,
        observe: observe,
        params: queryParameters,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * get Resume of the Dwellings
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getResume(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DwellingResume>;
  public getResume(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DwellingResume>>;
  public getResume(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DwellingResume>>;
  public getResume(
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<DwellingResume>(
      `${this.basePath}/dwelling/resume`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setOwnerAsResident(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Resident>;
  public setOwnerAsResident(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Resident>>;
  public setOwnerAsResident(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Resident>>;
  public setOwnerAsResident(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling setOwnerAsResident.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.post<Resident>(
      `${this.basePath}/dwelling/${encodeURIComponent(
        String(id)
      )}/owner-as-resident`,
      null,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Return a pagination of dwelling water meter measurements between dates.
   * @param id A unique integer value identifying this dwelling.
   * @param page A page number within the paginated result set.
   * @param pageSize Number of results to return per page.
   * @param startDate Filter start date
   * @param endDate Filter end date
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDwellingWaterMeterMeasurements(
    id: number,
    page?: number,
    pageSize?: number,
    startDate?: string,
    endDate?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<WaterMeterMeasurementsPagination>;
  public getDwellingWaterMeterMeasurements(
    id: number,
    page?: number,
    pageSize?: number,
    startDate?: string,
    endDate?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<WaterMeterMeasurementsPagination>>;
  public getDwellingWaterMeterMeasurements(
    id: number,
    page?: number,
    pageSize?: number,
    startDate?: string,
    endDate?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<WaterMeterMeasurementsPagination>>;
  public getDwellingWaterMeterMeasurements(
    id: number,
    page?: number,
    pageSize?: number,
    startDate?: string,
    endDate?: string,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getDwellingWaterMeterMeasurements.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (page !== undefined && page !== null) {
      queryParameters = queryParameters.set('page', <any>page);
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = queryParameters.set('page_size', <any>pageSize);
    }
    if (startDate !== undefined && startDate !== null) {
      queryParameters = queryParameters.set('start_date', <any>startDate);
    }
    if (endDate !== undefined && endDate !== null) {
      queryParameters = queryParameters.set('end_date', <any>endDate);
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<any>(
      `${this.basePath}/dwelling/${encodeURIComponent(
        String(id)
      )}/water-meter/measurements/`,
      {
        headers: headers,
        observe: observe,
        params: queryParameters,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Return the full list of comments for this dwelling.
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDwellingComments(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<Comment>>;
  public getDwellingComments(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Comment>>>;
  public getDwellingComments(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Comment>>>;
  public getDwellingComments(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getDwellingComments.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<Comment>>(
      `${this.basePath}/dwelling/${encodeURIComponent(String(id))}/comment`,
      {
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   *
   * Return current month consumption for the dwelling.
   * @param id
   * @param date Date for month consumption
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
   public getDwellingMonthConsumption(
    id: number,
    date?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DwellingMonthConsumption>;
  public getDwellingMonthConsumption(
    id: number,
    date?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DwellingMonthConsumption>>;
  public getDwellingMonthConsumption(
    id: number,
    date?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DwellingMonthConsumption>>;
  public getDwellingMonthConsumption(
    id: number,
    date?: string,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getDwellingMonthConsumption.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (date !== undefined && date !== null) {
      queryParameters = queryParameters.set('date', <any>date);
    }

    let headers = this.defaultHeaders;

    // authentication (Basic) required
    if (this.configuration.username || this.configuration.password) {
      headers = headers.set(
        'Authorization',
        'Basic ' +
          btoa(this.configuration.username + ':' + this.configuration.password)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<DwellingMonthConsumption>(
      `${this.basePath}/dwelling/${encodeURIComponent(
        String(id)
      )}/month-consumption/`,
      {
        headers: headers,
        observe: observe,
        params: queryParameters,
        reportProgress: reportProgress,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }
}
